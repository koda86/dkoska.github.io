[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Daniel Koska",
    "section": "",
    "text": "This is intended to be a collection of ongoing and past projects, papers, coding adventures and whatever else seems worth sharing. This blog‚Äôs running on GitHub Pages and is written using Quarto, making it easy to share code examples. And hey, if you spot something cool, you can dive straight into the GitHub repo and start playing around with it."
  },
  {
    "objectID": "index.html#welcome",
    "href": "index.html#welcome",
    "title": "Daniel Koska",
    "section": "",
    "text": "This is intended to be a collection of ongoing and past projects, papers, coding adventures and whatever else seems worth sharing. This blog‚Äôs running on GitHub Pages and is written using Quarto, making it easy to share code examples. And hey, if you spot something cool, you can dive straight into the GitHub repo and start playing around with it."
  },
  {
    "objectID": "index.html#software-contributions",
    "href": "index.html#software-contributions",
    "title": "Daniel Koska",
    "section": "Software contributions",
    "text": "Software contributions\n\nFunctional Bootstrapped Bands\nThis whole thing emerged when I thought about ways to adequately characterize differences between joint angles calculated from a 3D camera system and an inertial measurement unit (IMU) system. There are some good reads about what not to do and how to implement statistical methods for discrete data, see e. g. the highly cited work by Bland and Altman. It seemed less clear, though, what to do with continuous differences between two measurement systems.\nOne interesting paper described a way to expand the Limits of Agreement (LoA) method described by Bland and Altman (1986, 2007) to continuous data by using a functional approach (Roslien et al., 2012). Their approach in a nutshell: Continuous data (aka curves) are approximated using functions and a functional counterpart of the limits of agreement is calculated. The problem, however, is that the approach is not entirely functional. Rather, the actual calculation of the LoA (Limits of Agreement) done using the wonderful R package ‚Äòfda‚Äô, is carried out for each individual point of the previously determined functional curves. Strictly speaking, this turns the whole idea of using functions on its head and results in LoA that a are likely too narrow (Koska et al., 2023), which in turn corresponds to an underestimation of the random measurement error.\nAgain, I was forced to dig further and came across the paper by Lenhoff et al.¬†(1999), which - to be fair - many method-oriented biomechanists are probably familiar with. In Lenhoff et al., the curves are also treated as functions, but the actual hack is that a distribution is generated by bootstrapping the coefficients of these functions. This means that the entire curve is included in the calculation of the variance, not just a part of it. The method in Lenhoff et al., to my knowledge, in turn, is based on the work of Olshen, Biden, Wyatt, and Sutherland from the 1980s (see, for example, Sutherland et al., 1988; Olshen et al., 1989).\nSutherland, D., Olshen, R., Biden, E., Wyatt, M., 1988. Development of Mature Walking. Mac Keith Press. Olshen, R.A., Biden, E.N., Wyatt, M.P., Sutherland, D.H., 1989. Gait analysis and the bootstrap. Ann. Statist. 17 (4), http://dx.doi.org/10.1214/aos/1176347372.\nOlshen, R.A., Biden, E.N., Wyatt, M.P., Sutherland, D.H., 1989. Gait analysis and the bootstrap. Ann. Statist. 17 (4), http://dx.doi.org/10.1214/aos/1176347372.\nThe method is not exactly new. What is even more remarkable is that the R version of my code, which I published in the appendix of my paper in the Journal of Biomechanics (Koska et al., 2023), represents the first known disclosure of a code implementation of the algorithm to me. The emphasis here is on ‚Äòknown to me‚Äô, meaning that at least I couldn‚Äôt find any relevant code on the internet. And believe me, I would have loved to.\nSo, I set about translating the formulas in the appendix of Lenhoff et al.¬†(1999) to R code - completely without Chat-GPT or CoPilot (crazy, I know). Extremely helpful at this point was the Matlab code that a former colleague at our institute, Doris Oriwol, kindly provided me with. This gave me the opportunity to cross-check my implementation. Especially regarding the adjustment of the width of the bootstrapped bands to the desired confidence level, I probably would have made mistakes without her help. Full credit to her!\nJust as a small interjection: I am still very grateful for people who have the know-how and the time to review the code. The description in the Lenhoff paper is rather brief, and we were not always 1000% sure whether we had correctly interpreted or implemented the description of the algorithm. Further opinions and possible corrections are very welcome.\nIn the course of implementing the method, I also noticed something else: All examined bootstrap methods (including that of Roislien) have implemented a naive bootstrap, meaning they assume independence of the curves in the dataset. Accordingly, only one time series per subject was included in the bootstrap in these papers. From a methodological point of view, this is problematic since it ignores the intraindividual variance. In the context of investigating measurement errors, this means that the variance across repeated measurements within a person is not taken into account. This may further aggravate the problem of bands being too narrow.\nWe therefore extended the functional bootstrap bands to include a possibility to account for repeated measurements (i.e., dependent curves). This was realized through the two-stage bootstrap described in Davison and Hinkley (1997), in which subjects (including all of their curves) are sampled with replacement in the first stage, and one curve per subject is drawn without replacement in the second stage. In addition to the publication of the code, this implementation is, IMHO, the main contribution made by the FunBootBand method. Again, anyone who has comments, suggestions for improvement, or finds errors is welcome to get in touch. A systematic comparison of the method with the previously described methodological approaches (pointwise LoA, Functional LoA, Functional Bootstrapped bands) can be found in in Koska et al.¬†(2023).\nWhat follows are various versions of the functional bootstrap bands (ongoing development) in different programming languages. The R code has already been published as an R package. Future goals include making the code available in more programming languages and reducing the relatively high computation times (particularly due to bootstrapping). In R this may be done using RCpp, a C++ version. In Python, there is Cython, which should significantly reduce execution time. The goal is to make the method less accessible and thus further establish it. Of course, the method is not limited to the description of differences between measurement systems, but is useful wherever the variation of curve data needs to be analyzed statistically. This makes these functional bands a highly valuable tool.\n\n\nR version\nThe FunBootBand package contains a function to generate statistical (prediction or confidence) bands from curve data using a functional approach and bootstrapping.\n\n\n\n\n\nThe development version of FunBootBand can be installed from GitHub with:\ndevtools::install_github(‚Äúkoda86/FunBootBand‚Äù)\n\n\nPython version\nWork in progress, see here: [FunBoot]\n\n\nRCpp version\nOn my TODO list.\n\n\nEffort to compress (R code)\nWhile trying out different complexity measures, I stumbled upon the ‚Äòeffort to compress‚Äô (ETC) method introduced in (Nagaraj et al., 2013). ETC is a complexity measure for which code was originally presented as Matlab and Python Code. This repository contains an R implementation of the algorithm.\neffort2compress (GitHub)\nSee also the website of Nithin Nagaraj for the Matlab and Python versions: Website Nagaraj\nPython implementation: Github"
  },
  {
    "objectID": "index.html#blog",
    "href": "index.html#blog",
    "title": "Daniel Koska",
    "section": "Blog",
    "text": "Blog"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About me",
    "section": "",
    "text": "Daniel Koska\ndkoska@proton.me\nGitHub/koda86\n\nHey there! I‚Äôm currently working as a postdoc at Chemnitz University of Technology.\nMy professional playground includes data analysis, research methods, and stats. My PhD (finished 2023) involved developing methods for adequately characterizing continuous biomechanical data such as joint angles or force curves. Every now and then, I do some machine learning stuff and play with dynamic systems methods.\nI‚Äôm a big supporter of Free and Open Source Software ‚Äì it‚Äôs the way to go! You‚Äôll usually find me coding in R and Python.\nOff the clock, I switch gears and jam on my bass. üé∏"
  }
]